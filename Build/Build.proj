<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0"
         DefaultTargets="Build"
         xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <Import Project="$(MSBuildThisFileDirectory)..\Common\ClariusLabs.tasks" />
    <UsingTask TaskName="AddDependencies"
               TaskFactory="CodeTaskFactory"
               AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
        <ParameterGroup>
            <Items ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
        </ParameterGroup>
        <Task>
            <Reference Include="System.Xml"/>
            <Reference Include="System.Xml.Linq"/>
            <Using Namespace="System.IO"/>
            <Using Namespace="System.Linq"/>
            <Using Namespace="System.Xml"/>
            <Using Namespace="System.Xml.Linq"/>
            <Using Namespace="System.Text.RegularExpressions"/>
            <Code Type="Fragment"
                  Language="cs">
                <![CDATA[
                foreach (var item in this.Items)
                {
                    var config = XDocument.Load(item.GetMetadata("FullPath"));
                    var packages = config.Root.Elements()
                        .Select(x => new
                        {
                            Id = x.Attribute("id").Value,
                            Version = x.Attribute("version").Value,
                            TargetFramework = x.Attribute("targetFramework").Value
                        })
                        .Select(x => string.Format(
                            "\r\n                <dependency id=\"{0}\" version=\"{1}\"/>", x.Id, x.Version));

                    var dependencies = 
                        "<dependencies>" + 
                                    string.Join("", packages) +
                        "\r\n        </dependencies>";

                    File.WriteAllText(
                      item.GetMetadata("NuSpec"),
                      Regex.Replace(
                        File.ReadAllText(item.GetMetadata("NuSpec")),
                        "<dependencies />|<dependencies/>|<dependencies>.*</dependencies>",
                        dependencies,
                        RegexOptions.Singleline
                      )
                    );
                }
                ]]>
            </Code>
        </Task>
    </UsingTask>
    
    <Import Project="$(MSBuildThisFileDirectory)..\.nuget\NuGet.targets" />

    <PropertyGroup>
        <Configuration Condition="'$(Configuration)' == ''">Release</Configuration>
        <BuildRoot>$(MSBuildThisFileDirectory)..\</BuildRoot>
        <NuGetExe>$(BuildRoot).nuget\NuGet.exe</NuGetExe>
        <DropDirectory>$(BuildRoot)Drop\</DropDirectory>
        <PackagesInclude>$(BuildRoot)Src\*\bin\*.nuspec</PackagesInclude>
        <!--<PackagesInclude>$(BuildRoot)Src\Adapter.Interfaces\bin\Package.nuspec</PackagesInclude>-->
        <ReleaseNotes>$([System.IO.File]::ReadAllText('$(BuildRoot)ReleaseNotes.md'))</ReleaseNotes>
    </PropertyGroup>

    <ItemGroup>
        <SupportedFramework Include="net40" />
        <SupportedFramework Include="net45" />
    </ItemGroup>

    <PropertyGroup>
        <BuildDependsOn>
            $(BuildDependsOn);
            PrepareDropLocation;
            ReplaceCurrentVersions;
            BuildTargetFramework;
            PreparePackages;
            BuildBinaryPackages;
            BuildSourcePackages;
        </BuildDependsOn>
    </PropertyGroup>

    <Target Name="Clean">
        <Delete Files="$(DropDirectory)**\*.*" ContinueOnError="true" />
        <RemoveDir Directories="$(DropDirectory)" />

        <ItemGroup>
            <PackageSpec Include="$(PackagesInclude)" />
        </ItemGroup>

        <Delete Files="@(PackageSpec->'%(RootDir)%(Directory)**\*.*')" ContinueOnError="true" />
        <RemoveDir Directories="@(PackageSpec->'%(RootDir)%(Directory)')" ContinueOnError="true" />
    </Target>

    <Target Name="Build" DependsOnTargets="$(BuildDependsOn)">
        
    </Target>
    
    <Target Name="PrepareDropLocation">
        <MakeDir Condition="!Exists('$(DropDirectory)')" Directories="$(DropDirectory)" />
        <Delete Files="$(DropDirectory)*.*" ContinueOnError="false" />
    </Target>

    <Target Name="PreparePackages">
        <ItemGroup>
            <_PackageSpec Include="$(PackagesInclude)" />
        </ItemGroup>

        <AssignNuGetSpec Items="@(_PackageSpec)">
            <Output ItemName="PackageSpec" TaskParameter="Result"/>
        </AssignNuGetSpec>
    </Target>
    
    <Target Name="BuildBinaryPackages">
        <!-- First build the aggregate package -->
        <Copy SourceFiles="$(BuildRoot)Src\Adapter.nuspec" DestinationFolder="$(DropDirectory)" ContinueOnError="false" SkipUnchangedFiles="true"
              OverwriteReadOnlyFiles="true" Retries="$(CopyRetryCount)" RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)" />
        <Exec Command="$(NuGetExe) pack -NoPackageAnalysis $(DropDirectory)Adapter.nuspec -OutputDirectory $(DropDirectory)" ContinueOnError="false" />
        <Delete Files="$(DropDirectory)Adapter.nuspec" ContinueOnError="false" />

        <Exec Command="$(NuGetExe) pack -NoPackageAnalysis %(PackageSpec.FullPath) -Symbols -OutputDirectory $(DropDirectory)" ContinueOnError="false" />
    </Target>

    <Target Name="BuildSourcePackages" DependsOnTargets="CopySourceAsContent;AddPackageDependencies">
        <!-- First build the aggregate source package -->
        <Copy SourceFiles="$(BuildRoot)Src\Adapter.Source.nuspec" DestinationFolder="$(DropDirectory)" ContinueOnError="false" SkipUnchangedFiles="true"
              OverwriteReadOnlyFiles="true" Retries="$(CopyRetryCount)" RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)" />
        <Exec Command="$(NuGetExe) pack -NoPackageAnalysis $(DropDirectory)Adapter.Source.nuspec -OutputDirectory $(DropDirectory)" ContinueOnError="false" />
        <Delete Files="$(DropDirectory)Adapter.Source.nuspec" ContinueOnError="false" />

        <!-- Add Source to package ids and title -->
        <ItemGroup>
            <_SourceRegexTransform Include="%(PackageSpec.FullPath)">
                <Find><![CDATA[<id>(.+?)</id>]]></Find>
                <ReplaceWith><![CDATA[<id>$1.Source</id>]]></ReplaceWith>
            </_SourceRegexTransform>
            <_SourceRegexTransform Include="%(PackageSpec.FullPath)">
                <Find><![CDATA[<title>(.+?)</title>]]></Find>
                <ReplaceWith><![CDATA[<title>$1 (Source Code)</title>]]></ReplaceWith>
            </_SourceRegexTransform>
        </ItemGroup>

        <RegexTransform Items="@(_SourceRegexTransform)" />

        <!-- Cleanup the binaries and sources before building the actual packages -->
        <RemoveDir Directories="%(PackageSpec.RootDir)%(PackageSpec.Directory)lib" ContinueOnError="false" />
        <Delete Files="%(PackageSpec.RootDir)%(PackageSpec.Directory)src\**\*.*" ContinueOnError="true" />
        <RemoveDir Directories="%(PackageSpec.RootDir)%(PackageSpec.Directory)src" ContinueOnError="true" />

        <Exec Command="$(NuGetExe) pack -NoPackageAnalysis %(PackageSpec.FullPath) -OutputDirectory $(DropDirectory)" ContinueOnError="false" />
    </Target>
    
    <Target Name="ReplaceCurrentVersions">
        <ReadAssemblyVersion File="$(BuildRoot)Src\GlobalAssemblyInfo.cs">
            <Output PropertyName="VersionMajor"
                    TaskParameter="Major"/>
            <Output PropertyName="VersionMinor"
                    TaskParameter="Minor"/>
            <Output PropertyName="VersionBuild"
                    TaskParameter="Build"/>
            <Output PropertyName="VersionRevision"
                    TaskParameter="Revision"/>
        </ReadAssemblyVersion>

        <PropertyGroup>
            <Major>$(VersionMajor)</Major>
            <Minor>$(VersionMinor)</Minor>
            <!-- Build number is of the format (2 digit year)(2 digit month) -->
            <Build>$([System.DateTime]::Now.ToString("yyMM"))</Build>
            <!-- Revision number is of the format (2 digit hour)(2 digit minutes) -->
            <Revision>$([System.DateTime]::Now.ToString("ddHH"))</Revision>
            <FileVersion>$(Major).$(Minor).$(Build).$(Revision)</FileVersion>
            <!-- TODO: maybe we should have two builds, one that builds the public simplified version
                 and one with the full build/revision -->
            <PackageVersion>$(FileVersion)</PackageVersion>
        </PropertyGroup>

        <ItemGroup>
            <_VersionRegexTransform Include="$(BuildRoot)Src\GlobalAssemblyInfo.cs">
                <Find>AssemblyFileVersion\(".*?"\)</Find>
                <ReplaceWith>AssemblyFileVersion("$(FileVersion)")</ReplaceWith>
            </_VersionRegexTransform>
            <_VersionRegexTransform Include="$(BuildRoot)**\*.nuspec">
                <Find><![CDATA[<version>.*?</version>]]></Find>
                <ReplaceWith><![CDATA[<version>$(PackageVersion)</version>]]></ReplaceWith>
            </_VersionRegexTransform>
            <_VersionRegexTransform Include="$(BuildRoot)**\*.nuspec"
                            Condition="'$(ReleaseNotes)' != ''">
                <Find><![CDATA[<releaseNotes />|<releaseNotes/>|<releaseNotes>.*</releaseNotes>]]></Find>
                <ReplaceWith><![CDATA[<releaseNotes>$(ReleaseNotes)</releaseNotes>]]></ReplaceWith>
                <Options>Singleline</Options>
            </_VersionRegexTransform>
            <!-- Replace dependency versions in the aggregated package -->
            <_VersionRegexTransform Include="$(BuildRoot)Src\Adapter.nuspec">
                <Find>version=".*?"</Find>
                <ReplaceWith>version="$(PackageVersion)"</ReplaceWith>
            </_VersionRegexTransform>
        </ItemGroup>

        <RegexTransform Items="@(_VersionRegexTransform)" />
    </Target>

    <Target Name="BuildTargetFramework">
        <ParseFrameworkName FrameworkName="%(SupportedFramework.Identity)" NuGetExe="$(NuGetExe)">
            <Output TaskParameter="FrameworkSpec" ItemName="TargetFramework" />
        </ParseFrameworkName>

        <MSBuild Projects="$(BuildRoot)Adapter.sln"
    			 Properties="NuGet=true;FrameworkName=%(TargetFramework.Name);TargetFrameworkIdentifier=%(TargetFramework.Identifier);TargetFrameworkVersion=%(TargetFramework.Version);TargetFrameworkProfile=%(TargetFramework.Profile)"
    			 Targets="Build" />
    </Target>

    <!-- 
        This task batches on the supported framework names, so that 
        a full set of source files are copied to each of the supported
        framework target folders. This avoids users installing the 
        sources on a project where they won't compile.
    -->
    <Target Name="CopySourceAsContent" 
            Inputs="%(SupportedFramework.Identity)" 
            Outputs="$(BuildRoot)Src\*\bin\content\%(Identity)\**\*.*">
        <PropertyGroup>
            <!-- Grab the currently batching framework name as a property.
                 It's the only way I could make it to work to add it as 
                 a metadata property on the content files we need to copy. -->
            <TargetFolder>%(SupportedFramework.Identity)</TargetFolder>
        </PropertyGroup>
        <ItemGroup Condition="'$(TargetFolder)' != ''">
            <!-- Content files are made from the package directory src which was 
                 prepared by each project's target after build. 
                 We exclude netfx sources which never go as source but as dependencies,
                 and the *AssemblyInfo.cs
            -->
            <ContentFiles Include="%(PackageSpec.RootDir)%(PackageSpec.Directory)src\**\*.*"
                          Exclude="%(PackageSpec.RootDir)%(PackageSpec.Directory)src\netfx\**\*.*;
                                   %(PackageSpec.RootDir)%(PackageSpec.Directory)src\Properties\*.*">
                <PackageDir>%(PackageSpec.RootDir)%(PackageSpec.Directory)</PackageDir>
                <TargetFolder>$(TargetFolder)</TargetFolder>
            </ContentFiles>
        </ItemGroup>

        <ItemGroup>
            <_ContentRegexTransform Include="@(ContentFiles)" Condition="'%(Extension)' == '.cs'">
                <Find>namespace Patterns.Adapter</Find>
                <ReplaceWith>namespace $rootnamespace$.Patterns.Adapter</ReplaceWith>
            </_ContentRegexTransform>
        </ItemGroup>

        <RegexTransform Items="@(_ContentRegexTransform)" />

        <!-- Source files should be pre-processed -->
        <Copy SourceFiles="@(ContentFiles)" Condition="'$(TargetFolder)' != '' And '%(Extension)' == '.cs'"
              DestinationFiles="@(ContentFiles->'%(PackageDir)content\%(TargetFolder)\Patterns\Adapter\%(RecursiveDir)%(Filename)%(Extension).pp')"
              ContinueOnError="false"
              SkipUnchangedFiles="true"
              OverwriteReadOnlyFiles="true"
              Retries="$(CopyRetryCount)"
              RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)" />

        <!-- Source files should be pre-processed -->
        <Copy SourceFiles="@(ContentFiles)" Condition="'$(TargetFolder)' != '' And '%(Extension)' != '.cs'"
              DestinationFiles="@(ContentFiles->'%(PackageDir)content\%(TargetFolder)\Patterns\Adapter\%(RecursiveDir)%(Filename)%(Extension)')"
              ContinueOnError="false"
              SkipUnchangedFiles="true"
              OverwriteReadOnlyFiles="true"
              Retries="$(CopyRetryCount)"
              RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)" />
    </Target>

    <!-- 
        This task injects the packages listed in the packages.config 
        of the owning project as dependencies of the resulting source 
        package, since those will be required in order to compile. 
    -->
    <Target Name="AddPackageDependencies">
        <ItemGroup>
            <PackagesConfig Include="%(PackageSpec.RootDir)%(PackageSpec.Directory)..\packages.config">
                <NuSpec>%(PackageSpec.FullPath)</NuSpec>
            </PackagesConfig>
        </ItemGroup>

        <AddDependencies Items="@(PackagesConfig)" Condition="Exists(%(PackagesConfig.FullPath))" />
    </Target>
</Project>